version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - API_URL=http://api:3001
    depends_on:
      - api
    volumes:
      - ./frontend:/usr/share/nginx/html
    networks:
      - pickup-network
    restart: unless-stopped

  # API service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - RPC_URL=${RPC_URL:-http://localhost:8545}
      - JWT_SECRET=${JWT_SECRET}
      - PICKUP_SYSTEM_ADDRESS=${PICKUP_SYSTEM_ADDRESS}
      - WALLET_ENHANCEMENT_ADDRESS=${WALLET_ENHANCEMENT_ADDRESS}
      - ANALYTICS_ADDRESS=${ANALYTICS_ADDRESS}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/anonymous_pickup
    depends_on:
      - postgres
      - redis
    volumes:
      - ./circuits:/app/circuits:ro
      - ./api:/app
      - api-uploads:/app/uploads
    networks:
      - pickup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database service
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=anonymous_pickup
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - pickup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - pickup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Blockchain node (for development)
  hardhat-node:
    build:
      context: .
      dockerfile: Dockerfile.hardhat
    ports:
      - "8545:8545"
    environment:
      - NODE_ENV=development
    volumes:
      - ./contracts:/app/contracts
      - ./scripts:/app/scripts
      - blockchain-data:/app/data
    networks:
      - pickup-network
    restart: unless-stopped
    profiles:
      - development

  # Contract deployer service
  contract-deployer:
    build:
      context: .
      dockerfile: Dockerfile.deployer
    environment:
      - RPC_URL=${RPC_URL:-http://hardhat-node:8545}
      - PRIVATE_KEY=${DEPLOYER_PRIVATE_KEY}
      - NODE_ENV=production
    depends_on:
      - hardhat-node
    volumes:
      - ./contracts:/app/contracts
      - ./scripts:/app/scripts
      - ./circuits:/app/circuits
      - contract-deployments:/app/deployments
    networks:
      - pickup-network
    profiles:
      - deploy

  # Circuit compiler service
  circuit-compiler:
    build:
      context: .
      dockerfile: Dockerfile.circuit
    volumes:
      - ./circuits:/app/circuits
      - circuit-artifacts:/app/build
    networks:
      - pickup-network
    profiles:
      - compile

  # Monitoring service
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pickup-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - pickup-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - pickup-network
    restart: unless-stopped
    profiles:
      - logging

  # Log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
    ports:
      - "5044:5044"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - pickup-network
    restart: unless-stopped
    profiles:
      - logging

  # Log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - pickup-network
    restart: unless-stopped
    profiles:
      - logging

  # Load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - frontend
      - api
    networks:
      - pickup-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  blockchain-data:
    driver: local
  contract-deployments:
    driver: local
  circuit-artifacts:
    driver: local
  api-uploads:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  pickup-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

