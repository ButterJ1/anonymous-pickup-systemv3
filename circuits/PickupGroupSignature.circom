pragma circom 2.0.0;

include "node_modules/circomlib/circuits/poseidon.circom";
include "node_modules/circomlib/circuits/comparators.circom";
include "node_modules/circomlib/circuits/gates.circom";

template PickupGroupSignature() {
    // Private inputs (Alice's secrets - only she knows these)
    signal input buyer_secret;
    signal input buyer_name_hash;
    signal input buyer_phone_last_three;
    signal input buyer_nonce;
    signal input buyer_age;
    
    // Public inputs (the three-party commitment group + package data)
    signal input buyer_commitment;    // Generated when order placed
    signal input seller_commitment;   // From barcode Alice receives
    signal input store_commitment;    // Generated by store when Alice shows barcode
    signal input package_id;          // Package identifier as big integer
    signal input min_age_required;    // 0 for no age check, 18 for age check
    
    // Public outputs
    signal output group_signature;    // Proves Alice is in the authorized group
    signal output nullifier;          // Prevents double pickup
    signal output age_verified;       // 1 if age requirement met, 0 otherwise
    
    // === STEP 1: Verify Alice's buyer commitment ===
    // Generate Alice's actual commitment from her secrets
    component buyerCommitmentHasher = Poseidon(4);
    buyerCommitmentHasher.inputs[0] <== buyer_secret;
    buyerCommitmentHasher.inputs[1] <== buyer_name_hash;
    buyerCommitmentHasher.inputs[2] <== buyer_phone_last_three;
    buyerCommitmentHasher.inputs[3] <== buyer_nonce;
    signal alice_actual_commitment <== buyerCommitmentHasher.out;
    
    // Verify Alice knows the secret behind the buyer commitment
    component membershipCheck = IsEqual();
    membershipCheck.in[0] <== alice_actual_commitment;
    membershipCheck.in[1] <== buyer_commitment;
    membershipCheck.out === 1;
    
    // === STEP 2: Generate group signature ===
    // This proves Alice belongs to the three-party group {buyer, seller, store}
    component groupSigHasher = Poseidon(4);
    groupSigHasher.inputs[0] <== buyer_commitment;
    groupSigHasher.inputs[1] <== seller_commitment;
    groupSigHasher.inputs[2] <== store_commitment;
    groupSigHasher.inputs[3] <== alice_actual_commitment;  // Alice's proof of membership
    group_signature <== groupSigHasher.out;
    
    // === STEP 3: Generate unique nullifier ===
    // Prevents Alice from picking up the same package twice
    component nullifierHasher = Poseidon(4);
    nullifierHasher.inputs[0] <== buyer_secret;
    nullifierHasher.inputs[1] <== package_id;
    nullifierHasher.inputs[2] <== store_commitment;  // Ties to specific store interaction
    nullifierHasher.inputs[3] <== buyer_nonce;      // Additional uniqueness
    nullifier <== nullifierHasher.out;
    
    // === STEP 4: Age verification constraint ===
    component ageCheck = GreaterEqThan(8);  // 8 bits for age (0-255)
    ageCheck.in[0] <== buyer_age;
    ageCheck.in[1] <== min_age_required;
    
    // If no age requirement (min_age_required = 0), automatically pass
    component noAgeRequired = IsEqual();
    noAgeRequired.in[0] <== min_age_required;
    noAgeRequired.in[1] <== 0;
    
    // Age verified if either no age required OR age >= min_age_required
    component ageOr = OR();
    ageOr.a <== noAgeRequired.out;  // 1 if no age required
    ageOr.b <== ageCheck.out;       // 1 if age >= min_age_required
    age_verified <== ageOr.out;
    
    // Constraint: Age verification must pass
    age_verified === 1;
    
    // === STEP 5: Range checks for safety ===
    // Ensure phone last three digits is in valid range (0-999)
    component phoneRangeCheck = LessThan(10);
    phoneRangeCheck.in[0] <== buyer_phone_last_three;
    phoneRangeCheck.in[1] <== 1000;
    phoneRangeCheck.out === 1;
    
    // Ensure age is in reasonable range (0-150)
    component ageRangeCheck = LessThan(8);
    ageRangeCheck.in[0] <== buyer_age;
    ageRangeCheck.in[1] <== 151;
    ageRangeCheck.out === 1;
    
    // Ensure package_id is non-zero (valid package)
    component packageIdCheck = IsZero();
    packageIdCheck.in <== package_id;
    packageIdCheck.out === 0;  // package_id must NOT be zero
}

// Main component with public inputs specified
component main {
    public [buyer_commitment, seller_commitment, store_commitment, package_id, min_age_required]
} = PickupGroupSignature();